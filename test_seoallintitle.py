# Generated by Selenium IDE
import pytest
import time
import json
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.common import exceptions
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import csv


with open("final.csv") as file:
    rows = csv.DictReader(file)
    already_scanned = {r["Keyword"] for r in rows}
with open("not_good.txt") as file:
    for word in file.readlines():
        already_scanned.add(word.strip())


class TestSeoallintitle():
  
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.vars = {}
      
    def teardown_method(self, method):
        self.driver.quit()

    def test_seoallintitle(self):
        self.driver.get("https://www.google.com/search?q=%20")
        self.driver.set_window_size(1050, 702)
        self.bypass_accept_cookie()
        self.write_new_csv()
        
    def bypass_accept_cookie(self):
        try:
            # TODO: find more stable way, because id could change
            self.driver.find_element(By.ID, "L2AGLb").click()
        except exceptions.NoSuchElementException:
            # If no condition to accept, just continue
            pass
        
    def open_csv(self):
        with open("keywords.csv", 'rb') as f:
            content = f.read()
        content = content.decode("utf-8")
        rows = content.split("\r\n")
        return rows[1:-1]

    def get_keywords_and_monthly_average(self):
        for row in self.open_csv():
            values = row.split(",")
            keyword = values[0]
            # breakpoint()
            if keyword in already_scanned:
                continue
            monthly_avg = int(values[2])
            if 100 <= monthly_avg <= 5000:
                yield keyword, monthly_avg

    def write_new_csv(self):
        for keyword, monthly_avg in self.get_keywords_and_monthly_average():
            total_search = int(self.get_result_for_keyword(keyword))
            if total_search > 5000:
                with open("final.csv", "a") as file:
                    print(
                        keyword, monthly_avg, total_search, total_search / monthly_avg,
                        sep=",",
                        file=file,
                    )
            else:
                with open("not_good.txt", "a") as file:
                    print(keyword, file=file)

    def get_result_for_keyword(self, keyword):
        self.empty_last_keyword()
        self.driver.find_element(By.CSS_SELECTOR, "[aria-label='Effacer']")
        self.driver.find_element(By.NAME, "q").send_keys(
            "allintitle: {}".format(keyword)
        )
        self.driver.find_element(By.NAME, "q").send_keys(Keys.ENTER)
        try:
            element = self.driver.find_element(By.ID, "result-stats")
        except exceptions.NoSuchElementException:
            print(f"Results not found for: {keyword}")
            return 0
        text = element.text
        pattern = r"(Environ )?(.*) r√©sultats" 
        resultat = re.match(pattern, text)
        return resultat.groups()[1].replace("\u202f", "")

    def empty_last_keyword(self):
        self.driver.find_element(By.CSS_SELECTOR, ".ExCKkf path").click()
